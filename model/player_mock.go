// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model

import (
	"sync"
)

// Ensure, that PlayerMock does implement Player.
// If this is not the case, regenerate this file with moq.
var _ Player = &PlayerMock{}

// PlayerMock is a mock implementation of Player.
//
//	func TestSomethingThatUsesPlayer(t *testing.T) {
//
//		// make and configure a mocked Player
//		mockedPlayer := &PlayerMock{
//			GetMoveFunc: func() Move {
//				panic("mock out the GetMove method")
//			},
//			GetNameFunc: func() string {
//				panic("mock out the GetName method")
//			},
//			GetScoreFunc: func() int {
//				panic("mock out the GetScore method")
//			},
//			IncrementScoreFunc: func()  {
//				panic("mock out the IncrementScore method")
//			},
//			ResetScoreFunc: func()  {
//				panic("mock out the ResetScore method")
//			},
//			SetNameFunc: func()  {
//				panic("mock out the SetName method")
//			},
//			SetNextMoveFunc: func()  {
//				panic("mock out the SetNextMove method")
//			},
//		}
//
//		// use mockedPlayer in code that requires Player
//		// and then make assertions.
//
//	}
type PlayerMock struct {
	// GetMoveFunc mocks the GetMove method.
	GetMoveFunc func() Move

	// GetNameFunc mocks the GetName method.
	GetNameFunc func() string

	// GetScoreFunc mocks the GetScore method.
	GetScoreFunc func() int

	// IncrementScoreFunc mocks the IncrementScore method.
	IncrementScoreFunc func()

	// ResetScoreFunc mocks the ResetScore method.
	ResetScoreFunc func()

	// SetNameFunc mocks the SetName method.
	SetNameFunc func()

	// SetNextMoveFunc mocks the SetNextMove method.
	SetNextMoveFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// GetMove holds details about calls to the GetMove method.
		GetMove []struct {
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
		}
		// GetScore holds details about calls to the GetScore method.
		GetScore []struct {
		}
		// IncrementScore holds details about calls to the IncrementScore method.
		IncrementScore []struct {
		}
		// ResetScore holds details about calls to the ResetScore method.
		ResetScore []struct {
		}
		// SetName holds details about calls to the SetName method.
		SetName []struct {
		}
		// SetNextMove holds details about calls to the SetNextMove method.
		SetNextMove []struct {
		}
	}
	lockGetMove        sync.RWMutex
	lockGetName        sync.RWMutex
	lockGetScore       sync.RWMutex
	lockIncrementScore sync.RWMutex
	lockResetScore     sync.RWMutex
	lockSetName        sync.RWMutex
	lockSetNextMove    sync.RWMutex
}

// GetMove calls GetMoveFunc.
func (mock *PlayerMock) GetMove() Move {
	callInfo := struct {
	}{}
	mock.lockGetMove.Lock()
	mock.calls.GetMove = append(mock.calls.GetMove, callInfo)
	mock.lockGetMove.Unlock()
	if mock.GetMoveFunc == nil {
		var (
			moveOut Move
		)
		return moveOut
	}
	return mock.GetMoveFunc()
}

// GetMoveCalls gets all the calls that were made to GetMove.
// Check the length with:
//
//	len(mockedPlayer.GetMoveCalls())
func (mock *PlayerMock) GetMoveCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMove.RLock()
	calls = mock.calls.GetMove
	mock.lockGetMove.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *PlayerMock) GetName() string {
	callInfo := struct {
	}{}
	mock.lockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	mock.lockGetName.Unlock()
	if mock.GetNameFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.GetNameFunc()
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//
//	len(mockedPlayer.GetNameCalls())
func (mock *PlayerMock) GetNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetName.RLock()
	calls = mock.calls.GetName
	mock.lockGetName.RUnlock()
	return calls
}

// GetScore calls GetScoreFunc.
func (mock *PlayerMock) GetScore() int {
	callInfo := struct {
	}{}
	mock.lockGetScore.Lock()
	mock.calls.GetScore = append(mock.calls.GetScore, callInfo)
	mock.lockGetScore.Unlock()
	if mock.GetScoreFunc == nil {
		var (
			nOut int
		)
		return nOut
	}
	return mock.GetScoreFunc()
}

// GetScoreCalls gets all the calls that were made to GetScore.
// Check the length with:
//
//	len(mockedPlayer.GetScoreCalls())
func (mock *PlayerMock) GetScoreCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetScore.RLock()
	calls = mock.calls.GetScore
	mock.lockGetScore.RUnlock()
	return calls
}

// IncrementScore calls IncrementScoreFunc.
func (mock *PlayerMock) IncrementScore() {
	callInfo := struct {
	}{}
	mock.lockIncrementScore.Lock()
	mock.calls.IncrementScore = append(mock.calls.IncrementScore, callInfo)
	mock.lockIncrementScore.Unlock()
	if mock.IncrementScoreFunc == nil {
		return
	}
	mock.IncrementScoreFunc()
}

// IncrementScoreCalls gets all the calls that were made to IncrementScore.
// Check the length with:
//
//	len(mockedPlayer.IncrementScoreCalls())
func (mock *PlayerMock) IncrementScoreCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIncrementScore.RLock()
	calls = mock.calls.IncrementScore
	mock.lockIncrementScore.RUnlock()
	return calls
}

// ResetScore calls ResetScoreFunc.
func (mock *PlayerMock) ResetScore() {
	callInfo := struct {
	}{}
	mock.lockResetScore.Lock()
	mock.calls.ResetScore = append(mock.calls.ResetScore, callInfo)
	mock.lockResetScore.Unlock()
	if mock.ResetScoreFunc == nil {
		return
	}
	mock.ResetScoreFunc()
}

// ResetScoreCalls gets all the calls that were made to ResetScore.
// Check the length with:
//
//	len(mockedPlayer.ResetScoreCalls())
func (mock *PlayerMock) ResetScoreCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResetScore.RLock()
	calls = mock.calls.ResetScore
	mock.lockResetScore.RUnlock()
	return calls
}

// SetName calls SetNameFunc.
func (mock *PlayerMock) SetName() {
	callInfo := struct {
	}{}
	mock.lockSetName.Lock()
	mock.calls.SetName = append(mock.calls.SetName, callInfo)
	mock.lockSetName.Unlock()
	if mock.SetNameFunc == nil {
		return
	}
	mock.SetNameFunc()
}

// SetNameCalls gets all the calls that were made to SetName.
// Check the length with:
//
//	len(mockedPlayer.SetNameCalls())
func (mock *PlayerMock) SetNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetName.RLock()
	calls = mock.calls.SetName
	mock.lockSetName.RUnlock()
	return calls
}

// SetNextMove calls SetNextMoveFunc.
func (mock *PlayerMock) SetNextMove() {
	callInfo := struct {
	}{}
	mock.lockSetNextMove.Lock()
	mock.calls.SetNextMove = append(mock.calls.SetNextMove, callInfo)
	mock.lockSetNextMove.Unlock()
	if mock.SetNextMoveFunc == nil {
		return
	}
	mock.SetNextMoveFunc()
}

// SetNextMoveCalls gets all the calls that were made to SetNextMove.
// Check the length with:
//
//	len(mockedPlayer.SetNextMoveCalls())
func (mock *PlayerMock) SetNextMoveCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetNextMove.RLock()
	calls = mock.calls.SetNextMove
	mock.lockSetNextMove.RUnlock()
	return calls
}
