// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model

import (
	"sync"
)

// Ensure, that RandomizerMock does implement Randomizer.
// If this is not the case, regenerate this file with moq.
var _ Randomizer = &RandomizerMock{}

// RandomizerMock is a mock implementation of Randomizer.
//
//	func TestSomethingThatUsesRandomizer(t *testing.T) {
//
//		// make and configure a mocked Randomizer
//		mockedRandomizer := &RandomizerMock{
//			IntnFunc: func(n int) int {
//				panic("mock out the Intn method")
//			},
//		}
//
//		// use mockedRandomizer in code that requires Randomizer
//		// and then make assertions.
//
//	}
type RandomizerMock struct {
	// IntnFunc mocks the Intn method.
	IntnFunc func(n int) int

	// calls tracks calls to the methods.
	calls struct {
		// Intn holds details about calls to the Intn method.
		Intn []struct {
			// N is the n argument value.
			N int
		}
	}
	lockIntn sync.RWMutex
}

// Intn calls IntnFunc.
func (mock *RandomizerMock) Intn(n int) int {
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockIntn.Lock()
	mock.calls.Intn = append(mock.calls.Intn, callInfo)
	mock.lockIntn.Unlock()
	if mock.IntnFunc == nil {
		var (
			nOut int
		)
		return nOut
	}
	return mock.IntnFunc(n)
}

// IntnCalls gets all the calls that were made to Intn.
// Check the length with:
//
//	len(mockedRandomizer.IntnCalls())
func (mock *RandomizerMock) IntnCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockIntn.RLock()
	calls = mock.calls.Intn
	mock.lockIntn.RUnlock()
	return calls
}
